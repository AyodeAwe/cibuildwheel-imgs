name: Build multi-arch docker image

on:
  workflow_call:
    inputs:
      ARCHES:
        required: true
        type: string
      CUDA_VER:
        required: true
        type: string
      LINUX_VER:
        required: true
        type: string
      PYTHON_VER:
        required: true
        type: string
      IMAGE_REPO:
        required: true
        type: string
      BUILD_TYPE:
        required: true
        type: string

jobs:
  get-prefix:
    runs-on: ubuntu-latest
    outputs:
        FULL_PREFIX: ${{ steps.get-prefix.outputs.FULL_PREFIX }}
        USED_REPO: ${{ steps.get-prefix.outputs.PREFIX }}
        TAG_PREFIX: ${{ steps.get-prefix.outputs.TAG_PREFIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compute Prefix
        id: get-prefix
        uses: ./.github/actions/compute-prefix
        with:
          ORIGINAL_PREFIX: rapidsai/${{ inputs.IMAGE_REPO }}
          IMAGE_REPOSITORY: ${{ inputs.IMAGE_REPO }}
          BUILD_TYPE: ${{ inputs.BUILD_TYPE }}

  build-multiarch-manifest:
    needs: [get-prefix]
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
            password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}
        - name: Create multiarch manifest
          run: |
            LATEST_CUDA_VER=$(yq '.CUDA_VER | sort | .[-1]' axis.yaml)
            LATEST_PYTHON_VER=$(yq -o json '.PYTHON_VER' axis.yaml | jq -r 'max_by(split(".") | map(tonumber))')
            LATEST_UBUNTU_VER=$(yq '.LINUX_VER | map(select(. == "*ubuntu*")) | sort | .[-1]' axis.yaml)
    
            source_tags=()
            tag="${{ needs.get-prefix.outputs.FULL_PREFIX }}cuda${{ inputs.CUDA_VER }}-${{ inputs.LINUX_VER }}-py${{ inputs.PYTHON_VER }}"
            for arch in $(echo '${{ inputs.ARCHES }}' | jq .[] -r); do
                source_tags+=("${tag}-${arch}")
            done
    
            docker manifest create ${tag} ${source_tags[@]}
            docker manifest push ${tag}
            if [[
                "${LATEST_UBUNTU_VER}" == "${{ inputs.LINUX_VER }}" &&
                "${LATEST_CUDA_VER}" == "${{ inputs.CUDA_VER }}" &&
                "${LATEST_PYTHON_VER}" == "${{ inputs.PYTHON_VER }}"
            ]]; then
                # only create a 'latest' manifest if it is a non-PR workflow.
                if [[ "${{ inputs.BUILD_TYPE }}" != "pull-request" ]]; then
                    docker manifest create rapidsai/${{ inputs.IMAGE_REPO }}:latest ${source_tags[@]}
                    docker manifest push rapidsai/${{ inputs.IMAGE_REPO }}:latest
                    else
                    echo "Skipping 'latest' manifest creation for PR workflow."
                fi
            fi